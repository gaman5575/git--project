pipeline {
    agent any

    environment {
        GIT_CREDENTIALS = credentials('git-credentials')  // Replace with your GitHub credentials ID
        DOCKER_CREDENTIALS = credentials('docker_credentials')  // Replace with your Docker Hub credentials ID
        DOCKER_USERNAME = 'gaman5575'
    }

    parameters {
        string(name: 'NEW_BRANCH', defaultValue: '', description: 'Branch name to create')
    }

    stages {
        stage('Clone Repositories and Update Version') {
            steps {
                script {
                    def repos = ["local1", "local2"]
                    repos.each { repo ->
                        // Checkout the repository if it doesn't exist
                        checkoutRepoIfNeeded(repo)
                        
                        // Proceed with version update
                        sh """
                            cd ${repo}
                            git config user.email "${env.GIT_CREDENTIALS_USR}@gmail.com"
                            git config user.name "${env.GIT_CREDENTIALS_USR}"
                            
                            current_version=\$(grep -oP '(?<=version: )\\K[\\d\\.]+' version.yml)
                            new_major_version=\$(echo "\$current_version" | awk -F. '{print \$1 + 1}')
                            new_version="\${new_major_version}.0.0"
                            
                            // Define the branch name
                            def new_branch_name = "new-version-${new_major_version}-release"

                            git checkout -b "\${new_branch_name}"
                            sed -i "s/version: .*/version: \${new_version}/" version.yml

                            git add .
                            git commit -m "Updated version to \${new_version}"
                            git push https://${env.GIT_CREDENTIALS_USR}:${env.GIT_CREDENTIALS_PSW}@github.com/${env.GIT_CREDENTIALS_USR}/${repo}.git "\${new_branch_name}"

                            cd ..
                        """
                    }
                }
            }
        }

        stage('Build and Push Docker Images') {
            steps {
                script {
                    def repos = ["local1", "local2"]
                    docker.withRegistry('https://index.docker.io/v1/', 'docker_credentials') {
                        repos.each { repo ->
                            def image = docker.build("${DOCKER_USERNAME}/${repo}:${new_version}", "./${repo}")
                            image.push()
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed"

            script {
                currentBuild.result = currentBuild.result ?: 'SUCCESS'
                if (currentBuild.result == 'FAILURE') {
                    echo "Pipeline failed!"
                    // Add your failure notification logic here
                }
            }
        }
    }
}

// Function to checkout repository if it doesn't exist
def checkoutRepoIfNeeded(repo) {
    if (!fileExists(repo)) {
        sh "git clone https://${env.GIT_CREDENTIALS_USR}:${env.GIT_CREDENTIALS_PSW}@github.com/${env.GIT_CREDENTIALS_USR}/${repo}.git"
    } else {
        echo "Directory ${repo} already exists. Skipping clone."
    }
}

// Function to check if a directory exists
def fileExists(path) {
    def file = file(path)
    return file.exists() && file.directory
}
